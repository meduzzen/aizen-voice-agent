name: Deploy the application to the server
on:
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        run: uv sync


  deploy:
    name: Deploy on server
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Configure SSH for Server Access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/ssh_key
          chmod 600 ~/.ssh/ssh_key
          touch ~/.ssh/known_hosts || true
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
      - name: Set up environment variables
        run: |
            echo "HOST=${{ secrets.HOST }}" > .env
            echo "PORT=${{ secrets.PORT }}" >> .env
            echo "RELOAD=${{ secrets.RELOAD }}" >> .env
            echo "ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS}}" >> .env
            echo "PUBLIC_HOST=${{ secrets.PUBLIC_HOST}}" >> .env
            echo "UV_WORKERS=${{ secrets.UV_WORKERS}}" >> .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY}}" >> .env
            echo "WSS_REALTIME_MODEL=${{ secrets.WSS_REALTIME_MODEL}}" >> .env
            echo "VOICE=${{ secrets.VOICE}}" >> .env
            echo "TEMPERATURE=${{ secrets.TEMPERATURE}}" >> .env
            echo "CHAT_MODEL=${{ secrets.CHAT_MODEL}}" >> .env
            echo "TRANSCRIPTION_MODEL=${{ secrets.TRANSCRIPTION_MODEL}}" >> .env
            echo "ELEVENLABS_API_KEY=${{ secrets.ELEVENLABS_API_KEY}}" >> .env
            echo "ELEVENLABS_VOICE_ID=${{ secrets.ELEVENLABS_VOICE_ID}}" >> .env
            echo "ELEVENLABS_MODEL_ID=${{ secrets.ELEVENLABS_MODEL_ID}}" >> .env
            echo "TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID}}" >> .env
            echo "TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN}}" >> .env
            echo "TWILIO_NUMBER=${{ secrets.TWILIO_NUMBER}}" >> .env
            echo "TWILIO_VOICE=${{ secrets.TWILIO_VOICE}}" >> .env
            echo "COLLECTION_NAME=${{ secrets.COLLECTION_NAME}}" >> .env
            echo "TOKEN_GOHIGHLEVEL=${{ secrets.TOKEN_GOHIGHLEVEL}}" >> .env
            echo "LOCATION_ID=${{ secrets.LOCATION_ID}}" >> .env
            echo "CALENDAR_ID=${{ secrets.CALENDAR_ID}}" >> .env
            echo "CUSTOM_FIELDS_ID=${{ secrets.CUSTOM_FIELDS_ID}}" >> .env
            echo "CUSTOM_FIELDS_KEY=${{ secrets.CUSTOM_FIELDS_KEY}}" >> .env

      - name: Create tag from GitHub SHA
        id: set_tag
        run: |
          echo "TAG=`echo ${{ github.sha }} | cut -c1-7`" >> $GITHUB_OUTPUT

      - name: Copy .env file to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: ".env"
          target: "/tmp/aizen"
      - uses: actions/checkout@v2

      - name: Build the Docker image
        env:
          TAG: ${{ steps.set_tag.outputs.TAG }}
        run: docker build -t aizen:latest -t aizen:${{ env.TAG }} .

      - name: Save Docker image
        env:
          TAG: ${{ steps.set_tag.outputs.TAG }}
        run: docker save aizen:latest aizen:${{ env.TAG }} | gzip > $GITHUB_WORKSPACE/aizen.tar.gz

      - name: Copy Docker Image to server
        run: |
          scp -i ~/.ssh/ssh_key $GITHUB_WORKSPACE/aizen.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:/tmp/aizen

      - name: Deploy Docker image on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            sudo docker load < /tmp/aizen/aizen.tar.gz
            docker stop aizen-api || true
            docker rm aizen-api || true
            sudo docker run -d \
            --restart unless-stopped \
            --env-file /tmp/aizen/.env \
            --name aizen-api \
            -p 8888:8000 \
            aizen:latest
